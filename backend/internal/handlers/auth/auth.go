package auth

import (
	"context"
	"database/sql"
	"os"
	"time"

	"log"

	"connectrpc.com/connect"
	"github.com/golang-jwt/jwt/v5"

	authv1 "chart-organizer/backend/gen/contracts/auth/v1" // generated by protoc-gen-go
	authRepo "chart-organizer/backend/internal/repository/auth"
)

type AuthHandler struct {
	DB *sql.DB
}

type claims struct {
	Username string `json:"username"`
	UserID   int    `json:"user_id"`
	jwt.RegisteredClaims
}

func generateJWT(username string, userID int) (string, error) {
	jwtKey := []byte(os.Getenv("JWT_KEY"))

	currentTime := time.Now()
	expirationTime := currentTime.Add(24 * time.Hour)
	claims := &claims{
		Username: username,
		UserID:   userID,
		RegisteredClaims: jwt.RegisteredClaims{
			IssuedAt:  jwt.NewNumericDate(currentTime),
			ExpiresAt: jwt.NewNumericDate(expirationTime),
		},
	}

	token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)
	tokenString, err := token.SignedString(jwtKey)
	if err != nil {
		return "", err
	}

	return tokenString, nil
}

func getUserID(db *sql.DB, username string) (int, error) {
	var userID int
	err := db.QueryRow("SELECT id FROM users WHERE username = ?", username).Scan(&userID)
	return userID, err
}

func (s *AuthHandler) Signup(
	ctx context.Context,
	req *connect.Request[authv1.SignupRequest],
) (*connect.Response[authv1.SignupResponse], error) {
	log.Println("Request headers: ", req.Header())

	username := req.Msg.Username
	password := req.Msg.Password

	// Validate input
	if username == "" || password == "" {
		res := connect.NewResponse(&authv1.SignupResponse{
			Error: "Username and password are required",
		})
		res.Header().Set("Chart-Organizer-Version", "v1")
		return res, nil
	}

	// Try to add the user
	err := authRepo.AddNewUser(s.DB, username, password)
	if err != nil {
		res := connect.NewResponse(&authv1.SignupResponse{
			Error: "Failed to create user: " + err.Error(),
		})
		res.Header().Set("Chart-Organizer-Version", "v1")
		return res, nil
	}

	// Get the user ID
	userID, err := getUserID(s.DB, username)
	if err != nil {
		res := connect.NewResponse(&authv1.SignupResponse{
			Error: "Failed to retrieve user ID",
		})
		res.Header().Set("Chart-Organizer-Version", "v1")
		return res, nil
	}

	// Generate JWT
	token, err := generateJWT(username, userID)
	if err != nil {
		res := connect.NewResponse(&authv1.SignupResponse{
			Error: "Failed to generate token",
		})
		res.Header().Set("Chart-Organizer-Version", "v1")
		return res, nil
	}

	res := connect.NewResponse(&authv1.SignupResponse{
		JwtToken: token,
	})
	res.Header().Set("Chart-Organizer-Version", "v1")
	return res, nil
}

func (s *AuthHandler) Login(
	ctx context.Context,
	req *connect.Request[authv1.LoginRequest],
) (*connect.Response[authv1.LoginResponse], error) {
	log.Println("Request headers: ", req.Header())

	username := req.Msg.Username
	password := req.Msg.Password

	// Validate input
	if username == "" || password == "" {
		res := connect.NewResponse(&authv1.LoginResponse{
			Error: "Username and password are required",
		})
		res.Header().Set("Chart-Organizer-Version", "v1")
		return res, nil
	}

	// Check credentials
	isValid, err := authRepo.CheckUsernameAndPassword(s.DB, username, password)
	if err != nil {
		res := connect.NewResponse(&authv1.LoginResponse{
			Error: "Authentication failed: " + err.Error(),
		})
		res.Header().Set("Chart-Organizer-Version", "v1")
		return res, nil
	}

	if !isValid {
		res := connect.NewResponse(&authv1.LoginResponse{
			Error: "Invalid username or password",
		})
		res.Header().Set("Chart-Organizer-Version", "v1")
		return res, nil
	}

	// Get the user ID
	userID, err := getUserID(s.DB, username)
	if err != nil {
		res := connect.NewResponse(&authv1.LoginResponse{
			Error: "Failed to retrieve user ID",
		})
		res.Header().Set("Chart-Organizer-Version", "v1")
		return res, nil
	}

	// Generate JWT
	token, err := generateJWT(username, userID)
	if err != nil {
		res := connect.NewResponse(&authv1.LoginResponse{
			Error: "Failed to generate token",
		})
		res.Header().Set("Chart-Organizer-Version", "v1")
		return res, nil
	}

	res := connect.NewResponse(&authv1.LoginResponse{
		JwtToken: token,
	})
	res.Header().Set("Chart-Organizer-Version", "v1")
	return res, nil
}
